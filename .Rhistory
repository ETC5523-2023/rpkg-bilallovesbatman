Value = as.numeric(summary_data)
)
return(summary_df)
}
summary_tvrating()
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This function calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists of the names of the values (minimum, Q1, median, Q3, maximum), while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tvrating A data frame that contains the TV ratings data with a column named "av_rating."
#'
#' @return A data frame with two columns: "Statistic" (the name of the statistic) and "Value."
#'
#' @export
summary_tvrating <- function(tvrating) {
require(dplyr)
if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
summary_tvrating()
summary_tvrating(tvrating)
View(summary_tvrating)
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot based on the selected
#' top genres.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of top genres to include in the plot (constant number).
#'
#' @return The plot for the genre distribution.
#'
#' @export
genre_distribution_plot <- function(tv_data, selected_genre) {
separate_genres <- tv_data |>
separate_rows(genres, sep = ",")
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = selected_genre)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
return(ggplotly(p1))
}
library(tvrating)
genre_distribution_plot(tvrating, selected_genre = 5)
genre_distribution_plot(tvrating, selected_genre = 5)
library(testthat)
test_that("summary_tvrating function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tvrating(tv_data_test)
expect_type(result, "NULL")
})
library(testthat)
test_that("summary_tvrating function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3, 10, 7, 6))
result <- summary_tvrating(tv_data_test)
expect_type(result, "NULL")
})
usethis::use_package("janitor", type = "imports")
library(janitor)
library(tidyverse)
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-01-08/IMDb_Economist_tv_ratings.csv'
tv_ratings <- read_csv(url) %>%
clean_names()
usethis::use_data(tv_ratings, overwrite = TRUE)
run_app()
summary_tvrating(tv_ratings)
summary_tvrating(av_rating)
summary_tvrating(tv_ratings$av_rating)
View(tv_ratings)
summary_tvrating(tv_ratings)
run_app()
library(janitor)
library(tidyverse)
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-01-08/IMDb_Economist_tv_ratings.csv'
library(tidyverse)
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-01-08/IMDb_Economist_tv_ratings.csv'
tv_ratings <- read_csv(url)
usethis::use_data(tv_ratings, overwrite = TRUE)
load("E:/Uni/Year 1/Semester 2/ETC5523 - Communicating With Data/Assignments/2/rpkg-bilallovesbatman/data/tv_ratings.rda")
devtools::document()
devtools::load_all()
run_app()
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists the names of the values (minimum, Q1, median, Q3, maximum) while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tv_data is the data frame that contains the TV ratings data.
#'
#' @return is the data frame with two columns: "Statistic" (the name of the statistic) and "Value".
#'
#' @export
summary_tvrating <- function(tvrating) {
require(dplyr)
if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
summary_tvrating()
summary_tvrating(tv_ratings)
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot based on the selected
#' top genres.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of top genres to include in the plot (constant number).
#'
#' @return The plot for the genre distribution.
#'
#' @export
genre_distribution_plot <- function(tv_data, selected_genre) {
separate_genres <- tv_data |>
separate_rows(genres, sep = ",")
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = selected_genre)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
return(ggplotly(p1))
}
genre_distribution_plot()
genre_distribution_plot(tv_ratings)
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot based on the selected
#' top genres.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of top genres to include in the plot (constant number).
#'
#' @return The plot for the genre distribution.
#'
#' @export
genre_plot <- function(tv_data, selected_genre) {
separate_genres <- tv_data |>
separate_rows(genres, sep = ",")
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = selected_genre)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
return(ggplotly(p1))
}
genre_plot(tv_data, selected_genre = 5)
genre_plot(tv_ratings, selected_genre = 5)
devtools::document()
rm(list = c("summary_tvrating"))
devtools::document()
genre_plot(tv_ratings, selected_genre = 5)
devtools::document()
devtools::install()
library(tidyverse)
library(tvrating)
devtools::check()
usethis::use_readme_rmd()
devtools::document()
usethis::use_package("tidyverse", type = "imports")
usethis::use_package("plotly", type = "imports")
devtools::document()
devtools::check()
devtools::load_all()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists the names of the values (minimum, Q1, median, Q3, maximum) while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tv_data is the data frame that contains the TV ratings data.
#'
#' @return is the data frame with two columns: "Statistic" (the name of the statistic) and "Value".
#'
#' @examples
#' summary_tvrating(tv_ratings)
#'
#' where tv_ratings is the dataset used.
#'
#' @export
summary_tvrating <- function(tvrating) {
require(dplyr)
if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
devtools::document()
devtools::load_all()
devtools::document()
#' @export
run_app <- function() {
app_dir <- system.file("eda-app", package = "tvrating")
shiny::runApp(app_dir, display.mode = "normal")
}
devtools::document()
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot based on the selected
#' top genres.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of top genres to include in the plot (constant number).
#'
#' @return The plot for the genre distribution.
#'
#' @examples
#' # example code
#'
#'genre_plot(tv_ratings, selected_genre = 5)
#'
#' tv_ratings is the dataset while selected_genre = 5 shows the top 5 genres in the plot.
#'
#' @export
genre_plot <- function(tv_data, selected_genre) {
separate_genres <- tv_data |>
separate_rows(genres, sep = ",")
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = selected_genre)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
return(ggplotly(p1))
}
devtools::document()
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists the names of the values (minimum, Q1, median, Q3, maximum) while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tv_data is the data frame that contains the TV ratings data.
#'
#' @return is the data frame with two columns: "Statistic" (the name of the statistic) and "Value".
#'
#' @examples
#' summary_tvrating(tv_ratings)
#'
#' where tv_ratings is the dataset used.
#'
#' @export
summary_tvrating <- function(tvrating) {
require(dplyr)
if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
devtools::document()
rm(list = c("genre_plot", "run_app", "summary_tvrating"))
devtools::document()
devtools::document()
devtools::check()
usethis::use_package("dplyr", type = "imports")
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
usethis::use_package("tidyr", type = "imports")
devtools::check()
devtools::document()
devtools::check()
usethis::use_package("ggplot2", type = "import")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
devtools::document()
devtools::check()
usethis::use_package("shiny", type = "import")
usethis::use_package("shinydashboard", type = "import")
devtools::document()
devtools::check()
glimpse(tv_ratings)
library(tidyverse)
glimpse(tv_ratings)
devtools::document()
devtools::document()
devtools::check()
.Last.error
devtools::document()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot based on the selected
#' top genres.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of top genres to include in the plot (constant number).
#'
#' @return The plot for the genre distribution.
#'
#' @examples
#' # example code
#'
#'genre_plot(tv_ratings, selected_genre = 5)
#'
#' # tv_ratings is the dataset while selected_genre = 5 shows the top 5 genres in the plot.
#'
#' @import ggplot2
#' @import tidyr
#' @importFrom tidyr separate_rows
#' @importFrom dplyr %>%
#' @importFrom dplyr select
#' @importFrom dplyr filter
#' @importFrom dplyr count
#' @importFrom dplyr slice_max
#' @export
#'
#' @export
genre_plot <- function(tv_data, selected_genre) {
separate_genres <- tv_data |>
separate_rows(genres, sep = ",")
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = selected_genre)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
return(p1)
}
genre_plot(tv_ratings, selected_genre = 5)
devtools::document()
rm(list = c("genre_plot"))
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::document()
#' TV Ratings Data Set
#'
#' This data set contains information about TV ratings.
#'
#' @format A data frame with 2,266 rows and 7 columns:
#'   \describe{
#'     \item{titleId}{Unique identifier for TV show titles. Character.}
#'     \item{seasonNumber}{Season number of the TV show. Numeric.}
#'     \item{title}{Title of the TV show. Character.}
#'     \item{date}{Date of the TV show. Date.}
#'     \item{av_rating}{Average viewer rating of the TV show. Numeric.}
#'     \item{share}{Viewer share of the TV show. Numeric.}
#'     \item{genres}{Genres of the TV show. Character.}
#'   }
#'
#' @name tv_ratings
#' @docType data
#' @keywords datasets
#' @export
"tv_ratings"
#' TV Ratings Data Set
#'
#' This data set contains information about TV ratings.
#'
#' @format A data frame with 2,266 rows and 7 columns:
#'   \describe{
#'     \item{titleId}{Unique identifier for TV show titles. Character.}
#'     \item{seasonNumber}{Season number of the TV show. Numeric.}
#'     \item{title}{Title of the TV show. Character.}
#'     \item{date}{Date of the TV show. Date.}
#'     \item{av_rating}{Average viewer rating of the TV show. Numeric.}
#'     \item{share}{Viewer share of the TV show. Numeric.}
#'     \item{genres}{Genres of the TV show. Character.}
#'   }
#'
#' @name tv_ratings
#' @docType data
#' @keywords datasets
#' @export
tv_ratings
devtools::document()
devtools::document()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
run_app()
usethis::use_data()
usethis::use_data_raw()
usethis::use_data(tv_ratings)
usethis::use_data(tv_ratings, overwrite = TRUE)
devtools::document()
devtools::check()
usethis::use_pkgdown()
usethis::use_pkgdown_github_pages()
usethis::use_pkgdown()
devtools::build_site()
webshot::install_phantomjs()
usethis::use_pkgdown()
devtools::check()
devtools::build_site()
