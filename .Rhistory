if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::load_all()
devtools::document()
library(janitor)
library(tidyverse)
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-01-08/IMDb_Economist_tv_ratings.csv'
tvrating <- read_csv(url) %>%
clean_names()
usethis::use_data(tvrating, overwrite = TRUE)
devtools::document()
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists the names of the values (minimum, Q1, median, Q3, maximum) while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tv_data is the data frame that contains the TV ratings data.
#'
#' @return is the data frame with two columns: "Statistic" (the name of the statistic) and "Value".
#'
#' @export
summary_tvrating <- function(tvrating) {
require(dplyr)
if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot based on the selected
#' top genres.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of top genres to include in the plot (constant number).
#'
#' @return The plot for the genre distribution.
#'
#' @export
genre_distribution_plot <- function(tv_data, selected_genre) {
separate_genres <- tv_data |>
separate_rows(genres, sep = ",")
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = selected_genre)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
return(ggplotly(p1))
}
library(testthat)
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tv(tv_data_test)
expect_is(result, "NULL")
})
library(testthat)
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tvrating(tv_data_test)
expect_is(result, "NULL")
})
library(tidyverse)
library(tvrating)
data("tvrating")
summary_tvrating(tvrating)
devtools::document()
devtools::check()
Imports:
shiny
run_app()
library(janitor)
library(tidyverse)
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-01-08/IMDb_Economist_tv_ratings.csv'
tvrating <- read_csv(url) %>%
clean_names()
usethis::use_data(tvrating, overwrite = TRUE)
devtools::document()
run_app()
#' @export
run_app <- function() {
app_dir <- system.file("eda-app", package = "tvrating")
shiny::runApp(app_dir, display.mode = "normal")
}
run_app()
library(janitor)
library(tidyverse)
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-01-08/IMDb_Economist_tv_ratings.csv'
tv_ratings <- read_csv(url) %>%
clean_names()
usethis::use_data(tvrating, overwrite = TRUE)
devtools::document()
library(janitor)
library(tidyverse)
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-01-08/IMDb_Economist_tv_ratings.csv'
tv_ratings <- read_csv(url) %>%
clean_names()
usethis::use_data(tv_ratings, overwrite = TRUE)
devtools::document()
#' @export
run_app <- function() {
app_dir <- system.file("eda-app", package = "tvrating")
shiny::runApp(app_dir, display.mode = "normal")
}
run_app()
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists the names of the values (minimum, Q1, median, Q3, maximum) while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tv_data is the data frame that contains the TV ratings data.
#'
#' @return is the data frame with two columns: "Statistic" (the name of the statistic) and "Value".
#'
#' @export
summary_tvrating <- function(tvrating) {
require(dplyr)
if (length(tv_ratings$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
devtools::document()
rm(list = c("run_app", "summary_tvrating"))
devtools::document()
library(testthat)
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tvrating(tv_data_test)
expect_is(result, "NULL")
})
library(testthat)
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(tv_ratings$av_rating = c(5, 9, 8, 3))
library(testthat)
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tvrating(tv_data_test)
expect_is(result, "NULL")
})
library(testthat)
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tvrating(tv_data_test)
expect_type(result, "NULL")
})
library(testthat)
test_that("summary_tvrating function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tvrating(tv_data_test)
expect_type(result, "NULL")
})
library(testthat)
test_that("summary_tvrating function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tvrating(tv_data_test)
expect_type(result, "NULL")
})
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists the names of the values (minimum, Q1, median, Q3, maximum) while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tv_data is the data frame that contains the TV ratings data.
#'
#' @return is the data frame with two columns: "Statistic" (the name of the statistic) and "Value".
#'
#' @export
summary_tvrating <- function(tvrating) {
require(dplyr)
if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
library(testthat)
test_that("summary_tvrating function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tvrating(tv_data_test)
expect_type(result, "NULL")
})
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot based on the selected
#' top genres.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of top genres to include in the plot (constant number).
#'
#' @return The plot for the genre distribution.
#'
#' @export
genre_distribution_plot <- function(tv_data, selected_genre) {
separate_genres <- tv_data |>
separate_rows(genres, sep = ",")
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = selected_genre)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
return(ggplotly(p1))
}
devtools::document()
library(tvrating)
library(tvrating)
devtools::load_all()
rm(list = c("genre_distribution_plot", "summary_tvrating"))
devtools::load_all()
devtools::document()
rm(list = ls())
library(tidyverse)
library(tvrating)
data("tvrating")
summary_tvrating(tvrating)
# Load the required libraries
library(tidyverse)
library(tvrating)
# Add any other libraries your document depends on
devtools::load_all()
devtools::document()
#' @export
run_app <- function() {
app_dir <- system.file("eda-app", package = "tvrating")
shiny::runApp(app_dir, display.mode = "normal")
}
run_app()
devtools::document()
#' @export
run_my_app <- function() {
app_dir <- system.file("eda-app", package = "tvrating")
shiny::runApp(app_dir, display.mode = "normal")
}
run_my_app()
devtools::document()
devtools::load_all()
#' @export
run_app <- function() {
app_dir <- system.file("eda-app", package = "tvrating")
shiny::runApp(app_dir, display.mode = "normal")
}
devtools::load_all()
devtools::document()
devtools::load_all()
devtools::load_all()
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists the names of the values (minimum, Q1, median, Q3, maximum) while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tv_data is the data frame that contains the TV ratings data.
#'
#' @return is the data frame with two columns: "Statistic" (the name of the statistic) and "Value".
#'
#' @export
summary_tvrating <- function(tvrating) {
require(dplyr)
if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
devtools::document()
library(testthat)
test_that("summary_tvrating function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tvrating(tv_data_test)
expect_type(result, "NULL")
})
sessionInfo()
devtools::load_all()
sessionInfo()
ls("package:tvrating")
library(tvrating)
summary_tvrating(tvrating)
genre_distribution_plot(tvrating, selected_genre = 5)
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot based on the selected
#' top genres.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of top genres to include in the plot (constant number).
#'
#' @return The plot for the genre distribution.
#'
#' @export
genre_distribution_plot <- function(tv_data, selected_genre) {
separate_genres <- tv_data |>
separate_rows(genres, sep = ",")
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = selected_genre)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
return(ggplotly(p1))
}
genre_distribution_plot(tvrating, selected_genre = 5)
summary_tvrating()
devtools::load_all()
devtools::load_all()
genre_distribution_plot(tvrating, selected_genre = 5)
devtools::document()
genre_distribution_plot(tvrating, selected_genre = 5)
summary_tvrating(tvrating)
library(tidyverse)
library(tvrating)
genre_distribution_plot(tvrating, selected_genre = 5)
library(plotly)
library(tidyverse)
library(tvrating)
genre_distribution_plot(tvrating, selected_genre = 5)
library(tvrating)
genre_distribution_plot(tvrating, selected_genre = 5)
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot based on the selected
#' top genres.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of top genres to include in the plot (constant number).
#'
#' @return The plot for the genre distribution.
#'
#' @export
genre_distribution_plot <- function(tv_data, selected_genre) {
separate_genres <- tv_data |>
separate_rows(genres, sep = ",")
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = selected_genre)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
return(ggplotly(p1))
}
genre_distribution_plot()
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot based on the selected
#' top genres.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of top genres to include in the plot (constant number).
#'
#' @return The plot for the genre distribution.
#'
#' @export
genre_distribution_plot <- function(tv_data, selected_genre = 5) {
separate_genres <- tv_data |>
separate_rows(genres, sep = ",")
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = selected_genre)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
return(ggplotly(p1))
}
genre_distribution_plot()
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists the names of the values (minimum, Q1, median, Q3, maximum) while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tv_data is the data frame that contains the TV ratings data.
#'
#' @return is the data frame with two columns: "Statistic" (the name of the statistic) and "Value".
#'
#' @export
summary_tvrating <- function(tvrating) {
require(dplyr)
if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
summary_tvrating()
