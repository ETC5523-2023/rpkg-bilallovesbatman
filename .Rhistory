library(janitor)
library(tidyverse)
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-01-08/IMDb_Economist_tv_ratings.csv'
tvrating <- read_csv(url) %>%
clean_names()
usethis::use_data(tvrating, overwrite = TRUE)
run_app <- function() {
app_dir <- system.file("eda-app", package = "tvrating")
shiny::runApp(app_dir, display.mode = "normal")
}
run_app()
devtools::load_all()
usethis::use_test()
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
expect_is(summary(tv_data_test), "NULL")
})
library(testthat)
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
expect_is(summary(tv_data_test), "NULL")
})
library(testthat)
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tv(tv_data_test)
expect_is(summary(tv_data_test), "NULL")
})
library(testthat)
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tv(tv_data_test)
expect_is(result, "NULL")
})
run_app()
devtools::document()
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists the names of the values (minimum, Q1, median, Q3, maximum) while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tvdata is the data frame that contains the TV ratings data.
#'
#' @return is the data frame with two columns: "Statistic" (the name of the statistic) and "Value".
#'
#' @export
summary_tv <- function(tvrating) {
require(dplyr)
if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
library(testthat)
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tv(tv_data_test)
expect_is(result, "NULL")
})
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists the names of the values (minimum, Q1, median, Q3, maximum) while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tv_data is the data frame that contains the TV ratings data.
#'
#' @return is the data frame with two columns: "Statistic" (the name of the statistic) and "Value".
#'
#' @export
summary_tv <- function(tvrating) {
require(dplyr)
if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
library(testthat)
test_that("ratings_summary function returns NULL when less than 5 values are input", {
# Sample data of less than 5 values
tv_data_test <- data.frame(av_rating = c(5, 9, 8, 3))
result <- summary_tv(tv_data_test)
expect_is(result, "NULL")
})
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot with the selected
#' top genres radio filter.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of rows to display per page in the table.
#'
#' @return The plot for the genre distribution.
#'
#' @export
genre_distribution_plot <- function(input, tvrating) {
separate_genres <- tv_ratings |>
separate_rows(genres, sep = ",")
output$genre_plot <- renderPlotly({
top_genres <- as.numeric(input$top_genres)
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = top_genres)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
ggplotly(p1)
})
}
devtools::document()
rm(list = c("run_app", "summary_tv"))
devtools::document()
devtools::load_all()
rm(list = c("genre_distribution_plot"))
devtools::load_all()
devtools::document()
#' Generating a parameterized genre distribution plot.
#'
#' This function generates the genre distribution plot with the selected
#' top genres radio filter.
#'
#' @param tv_data The TV ratings data.
#' @param selected_genre The number of rows to display per page in the table.
#'
#' @return The plot for the genre distribution.
#'
#' @export
genre_distribution_plot <- function(input, tvrating) {
separate_genres <- tv_ratings |>
separate_rows(genres, sep = ",")
output$genre_plot <- renderPlotly({
top_genres <- as.numeric(input$top_genres)
genre_count <- separate_genres |>
count(genres, sort = TRUE) |>
slice_max(order_by = n, n = top_genres)
p1 <- ggplot(genre_count,
aes(
x = reorder(genres, n),
y = n,
text = paste("Genre: ", genres, "<br>Count: ", n)
)) +
geom_bar(stat = "identity",
fill = "navy") +
coord_flip() +
labs(x = "Genre",
y = "Number of Shows") +
theme_classic() +
theme(axis.text.x = element_text(size = 15),
axis.text.y = element_text(size = 15),
axis.title.x = element_text(size = 15),
axis.title.y = element_text(size = 15))
ggplotly(p1)
})
}
devtools::document()
rm(list = c("genre_distribution_plot"))
usethis::use_vignette("TV Ratings")
usethis::use_vignette("tvrating")
View(tvrating)
summary_tv(tvrating)
usethis::use_package()
usethis::use_package("tidyverse")
usethis::use_package("tidyverse", type = "depends")
?ggplotly
usethis::use_package("plotly", type = "depends")
usethis::use_package("plotly", type = "imports")
usethis::use_package("magnitr", type = "depends")
library(tidyverse)
library(tvrating)
data("tvrating")
glimpse(tvrating) # Check observations and variables (rows and columns) and data types
summary(tvrating) # View the summary statistics of the dataset
summary_tv(tvrating)
genre_distribution_plot(input, tvrating)
devtools::document()
devtools::document()
devtools::document()
devtools::document()
genre_distribution_plot(input, tvrating)
genre_distribution_plot(input, output)
genre_distribution_plot(input, tvrating)
devtools::document()
genre_distribution_plot(tvrating, selected_genre)
devtools::document()
genre_distribution_plot(tvrating, selected_genre)
genre_distribution_plot(tvrating, selected_genre = 5)
devtools::document()
glimpse(tvrating) # Check observations and variables (rows and columns) and data types
summary(tvrating) # View the summary statistics of the dataset
library(janitor)
library(tidyverse)
url <- 'https://raw.githubusercontent.com/rfordatascience/tidytuesday/master/data/2019/2019-01-08/IMDb_Economist_tv_ratings.csv'
tvrating <- read_csv(url) %>%
clean_names()
usethis::use_data(tvrating, overwrite = TRUE)
devtools::load_all()
devtools::document()
#' Calculating the Five-Number Summary for TV Ratings
#'
#' This calculates the five-number summary (minimum, Q1, median, Q3, maximum) for the "av_rating" column in the TV ratings dataset.
#'
#' If the input is a numerical vector of at least 5 values, it returns a data frame with two columns in which the first column consists the names of the values (minimum, Q1, median, Q3, maximum) while the second column returns the five number summary values.
#'
#' If the input is a numerical vector of less than 5 values, it returns NULL.
#'
#' @param tv_data is the data frame that contains the TV ratings data.
#'
#' @return is the data frame with two columns: "Statistic" (the name of the statistic) and "Value".
#'
#' @export
summary_tv <- function(tvrating) {
require(dplyr)
if (length(tvrating$av_rating) < 5) {
warning("The 'av_rating' column must contain a minimum of 5 values")
return(NULL)
}
summary_data <- quantile(tvrating$av_rating, probs = c(0, 0.25, 0.5, 0.75, 1))
summary_df <- data.frame(
Statistic = c("Minimum", "1st Quartile (Q1)", "Median", "3rd Quartile (Q3)", "Maximum"),
Value = as.numeric(summary_data)
)
return(summary_df)
}
devtools::document()
devtools::load_all()
devtools::load_all()
devtools::load_all()
